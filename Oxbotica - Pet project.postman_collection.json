{
	"info": {
		"_postman_id": "926ad7b5-fbdf-4976-8db3-9a97b411ad6a",
		"name": "Oxbotica - Pet project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add a new pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Pet is created\", function () { \r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"petId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const idNumber = getIdNumber();\r",
							"pm.environment.set(\"petId\", idNumber);\r",
							"\r",
							"function getIdNumber(){\r",
							"    let getIncreaseNumber = parseInt(pm.environment.get(\"petId\"));\r",
							"    getIncreaseNumber += 1;\r",
							"    const id = getIncreaseNumber; \r",
							"    return id;\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{petId}},\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"family\"\r\n  },\r\n  \"name\": \"dog family\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}",
					"host": [
						"{{baseUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Pet is updated\", function () { \r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"previousPetId\"));\r",
							"    pm.expect(jsonData.status).to.eql(\"pending\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const previousId = getPreviousPetId();\r",
							"pm.environment.set(\"previousPetId\", previousId);\r",
							"\r",
							"function getPreviousPetId(){\r",
							"  const currentId = pm.environment.get(\"petId\");\r",
							"  return currentId -1;\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{previousPetId}},\r\n  \"category\": {\r\n    \"id\": 4,\r\n    \"name\": \"family3\"\r\n  },\r\n  \"name\": \"dog family\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"pending\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}",
					"host": [
						"{{baseUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pet by status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validate status\", function(){\r",
							"    for(let i = 0; i<jsonData.length; i++){\r",
							"        pm.expect(jsonData[i].status).to.eql(pm.environment.get(\"status\"));\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 100,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"family1\"\r\n  },\r\n  \"name\": \"dog family1\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/findByStatus?status={{status}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"findByStatus"
					],
					"query": [
						{
							"key": "status",
							"value": "{{status}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Pet by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validate status\", function(){\r",
							"    for(let i = 0; i<jsonData.length; i++){\r",
							"        pm.expect(jsonData[i].status).to.eql(pm.environment.get(\"status\"));\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 100,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"family1\"\r\n  },\r\n  \"name\": \"dog family1\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/:petId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						":petId"
					],
					"variable": [
						{
							"key": "petId",
							"value": "{{petId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Uploads an image to the Pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "PetImage.jpg"
						},
						{
							"key": "additionalMetadata",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/:petId/uploadImage",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						":petId",
						"uploadImage"
					],
					"variable": [
						{
							"key": "petId",
							"value": "{{petId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Pet with form-data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 415\", function () {\r",
							"    pm.response.to.have.status(415);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "bobye",
							"type": "text"
						},
						{
							"key": "status",
							"value": "sold",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/:petId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						":petId"
					],
					"variable": [
						{
							"key": "petId",
							"value": "{{previousPetId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Pet",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"petId\", resetPetId());\r",
							"pm.environment.set(\"previousPetId\", resetPreviousPetID());\r",
							"\r",
							"function resetPetId(){\r",
							"    const petId = pm.environment.get(\"previousPetId\");\r",
							"    return petId;\r",
							"}\r",
							"\r",
							"function resetPreviousPetID(){\r",
							"    const previousPetId = pm.environment.get(\"previousPetId\");\r",
							"    return (previousPetId-1);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 404\", function () {\r",
							"    pm.response.to.not.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validate message\", function(){\r",
							"    const messageNumber = parseInt(jsonData.message);\r",
							"    const currentPetId = pm.environment.get(\"petId\");\r",
							"    pm.expect(messageNumber).to.eql(currentPetId);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/:petId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						":petId"
					],
					"variable": [
						{
							"key": "petId",
							"value": "{{petId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2/pet",
			"type": "string"
		}
	]
}